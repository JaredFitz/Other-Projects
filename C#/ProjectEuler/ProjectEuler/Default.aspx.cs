using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace ProjectEuler
{
    public partial class Default : System.Web.UI.Page
    {
        public void Page_Load(object sender, EventArgs e)
        {
            Overview();            
        }

        protected void okButton_Click(object sender, EventArgs e)
        {
            var problemDictionary = new Dictionary<int, string>()
            {
                {0, Overview()},
                {1, Problem1()},
                {2, Problem2()},
                {3, Problem3()},
                {4, Problem4()},
                {5, Problem5()},
                {6, Problem6()},
                {7, Problem7()},
                {8, Problem8()},
                {9, Problem9()}
            };
            string result = problemDictionary.ElementAt(problemNumberDropDownList.SelectedIndex).Value;

            resultLabel.Text = result;            
        }

        public string Overview()
        {
            return String.Format("<p>Project Euler is a series of challenging " +
                "mathematical/computer programming problems that will require more than " +
                "just mathematical insights to solve. Although mathematics will help you " +
                "arrive at elegant and efficient methods, the use of a computer and programming " +
                "skills will be required to solve most problems.</p>");
        }
        public string Problem1()
        {
            //Problem 1:
            //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.The sum of these multiples is 23.
            //Find the sum of all the multiples of 3 or 5 below 1000.

            int problemOneTotal = 0;
            for (int i = 0; i < 1000; i++)
            {
                if (i % 3 == 0 || i % 5 ==0) problemOneTotal += i;
            }
            return "Problem 1:<br />If we list all the natural numbers below 10 that are multiples" +
                " of 3 or 5, we get 3, 5, 6 and 9.The sum of these multiples is 23." +
                "<br /><br /> Find the sum of all the multiples of 3 or 5 below 1000." +
                "<br /><br />Answer:<br />" + 
                problemOneTotal.ToString();
        }
        public string Problem2()
        {
            //Problem 2:
            //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be
            //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            //BY Considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

            int currentNumber = 1;
            int lastNumber = 1;
            int total = 0;
            int fibonacciTotal = 0;
            while (currentNumber < 4000000)
            {
                if (currentNumber % 2 == 0) fibonacciTotal += currentNumber;
                total = currentNumber + lastNumber;
                lastNumber = currentNumber;
                currentNumber = total;
            }

            return "Problem 2:<br />Each new term in the Fibonacci sequence is generated by " +
                "adding the previous two terms. By starting with 1 and 2, the first 10 " +
                "terms will be: <br /><br /> 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... <br /><br /> By " +
                "considering the terms in the Fibonacci sequence whose values do not exceed " +
                "four million, find the sum of the even-valued terms. <br /><br />Answer:<br />" + 
                fibonacciTotal.ToString();
        }
        public string Problem3()
        {
            //Problem 3:
            //The prime factors of 13195 are 5, 7, 13 and 29.
            //What is the largest prime factor of the number 600851475143 ?

            // What I know about primes: Every number (other than primes) can be found by multiplying primes (40 = 2*2*2*5, 39 = 3*13, etc.)

            long testNumber = 600851475143; 
            var primeList = new List<long>() { 2 };
            bool checkDivisible = true;
            
            for (long i = 3; i < testNumber; i += 2)
            {                
                // Check if number is prime.  Does this by seeing if it is divisible by any preceding prime numbers.
                foreach (var prime in primeList)
                {
                    if (i % prime == 0) { break; }
                    else if (prime == primeList.ElementAt(primeList.Count -1)) // if it was the last prime it was testing, the number must be prime if not divisible
                    {
                        primeList.Add(i);
                        checkDivisible = true;
                        while (checkDivisible) // divides the test number by the new prime until it is not divisible
                        {
                            if (testNumber % i == 0) { testNumber = testNumber / i; } // if divisible, breaks the number down to not loop through all the way to test number
                            else { checkDivisible = false; }
                        }
                        break; // primeList changes length and causes an error, needs to break out
                    }
                }
            }
            return "Problem 3:<br />The prime factors of 13195 are 5, 7, 13 and 29. " +
                "What is the largest prime factor of the number 600851475143 ?" +
                "<br /><br />Answer:<br />" +
                testNumber.ToString();
        }
        public string Problem4()
        {
            //Problem 4:
            //A palindromic number reads the same both ways. The largest palindrome made from the product of two 2 - digit numbers is 9009 = 91 × 99.
            //Find the largest palindrome made from the product of two 3 - digit numbers.
            
            int highestPalindrome = 0;
            int firstNumber = 0;
            int secondNumber = 0;
            int k;
            string kStr;
            for (int i = 999; i > 0; i--)
            {
                for (int j = 999; j > 0; j--)
                {
                    k = i * j;
                    kStr = k.ToString();
                    if (k > highestPalindrome)
                    {
                        highestPalindrome = CheckPalindrome(kStr) == "True" ? k : highestPalindrome;
                        firstNumber = i;
                        secondNumber = j;
                    }
                }
            }

            return "Problem 4:<br />A palindromic number reads the same both ways. The largest " +
                "palindrome made from the product of two 2 - digit numbers is 9009 = 91 × 99." +
                "<br /><br />Find the largest palindrome made from the product of two 3 - " +
                "digit numbers.<br /><br />Answer:<br />" +                
                String.Format("{0} ({1} x {2})",highestPalindrome.ToString(), firstNumber.ToString(), secondNumber.ToString());
        }
        public string Problem5()
        {
            //Problem 5:
            // 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
            // What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 ?
            bool check = false;
            int i = 0;
            while (!check)
            {
                i += 2520;
                for (int j = 11; j < 21; j++)
                {
                    if (i % j != 0) { check = false;  break; }
                    else { check = true; }
                }
            }

            return "Problem 5:<br />2520 is the smallest number that can be divided by each of " +
                "the numbers from 1 to 10 without any remainder.<br /><br />What is the smallest " +
                "positive number that is evenly divisible by all of the numbers from 1 to 20 ?<br />" +
                "<br />Answer:<br />" +
                i.ToString();
        }
        public string Problem6()
        {
            //Problem 6:
            //The sum of the squares of the first ten natural numbers is, 12 + 22 + ... + 102 = 385
            //The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)2 = 552 = 3025
            //Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
            //Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

            double result = 0;
            double squareSum = 0;
            for (int i = 1; i < 101; i++)
            {
                result += Math.Pow(i,2);
                squareSum += i;
            }
            result = Math.Pow(squareSum,2) - result;

            return "Problem 6:<br />The sum of the squares of the first ten natural numbers is," +
                "<br /><br />1^2 + 2^2 + ... + 10^2 = 385<br /><br />The square of the sum of the " +
                "first ten natural numbers is, (1 + 2 + ... + 10)^2 = 55^2 = 3025<br /><br />Hence " +
                "the difference between the sum of the squares of the first ten natural numbers " +
                "and the square of the sum is 3025 − 385 = 2640.<br /><br />Find the difference " +
                "between the sum of the squares of the first one hundred natural numbers and the " +
                "square of the sum.<br /><br />Answer:<br />" +
                result.ToString();
        }
        public string Problem7()
        {
            //Problem 7:
            //By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
            //What is the 10 001st prime number ?

            var primeList = new List<long>() { 2 };
            for (long i = 3; primeList.Count < 10001; i += 2)
            {
                // Check if number is prime.  Does this by seeing if it is divisible by any preceding prime numbers.
                foreach (var prime in primeList)
                {
                    if (i % prime == 0) { break; }
                    else if (prime == primeList.ElementAt(primeList.Count - 1)) // if it was the last prime it was testing, the number must be prime if not divisible
                    {
                        primeList.Add(i);
                        break; // primeList changes length and causes an error, needs to break out
                    }
                }
            }

            return "Problem 7:<br />By listing the first six prime numbers: 2, 3, 5, 7, 11, and " +
                "13, we can see that the 6th prime is 13.<br /><br />What is the 10 001st prime " +
                "number?<br /><br />Answer:<br />" +
                primeList.ElementAt(primeList.Count - 1).ToString();
        }
        public string Problem8()
        {
            //Problem 8:
            //The four adjacent digits in the 1000 - digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
            //73167176531330624919225119674426574742355349194934
            //96983520312774506326239578318016984801869478851843
            //85861560789112949495459501737958331952853208805511
            //12540698747158523863050715693290963295227443043557
            //66896648950445244523161731856403098711121722383113
            //62229893423380308135336276614282806444486645238749
            //30358907296290491560440772390713810515859307960866
            //70172427121883998797908792274921901699720888093776
            //65727333001053367881220235421809751254540594752243
            //52584907711670556013604839586446706324415722155397
            //53697817977846174064955149290862569321978468622482
            //83972241375657056057490261407972968652414535100474
            //82166370484403199890008895243450658541227588666881
            //16427171479924442928230863465674813919123162824586
            //17866458359124566529476545682848912883142607690042
            //24219022671055626321111109370544217506941658960408
            //07198403850962455444362981230987879927244284909188
            //84580156166097919133875499200524063689912560717606
            //05886116467109405077541002256983155200055935729725
            //71636269561882670428252483600823257530420752963450
            //Find the thirteen adjacent digits in the 1000 - digit number that have the greatest product. What is the value of this product ?

            string thousandNumber = "73167176531330624919225119674426574742355349194934" +
                "96983520312774506326239578318016984801869478851843" +
                "85861560789112949495459501737958331952853208805511" +
                "12540698747158523863050715693290963295227443043557" +
                "66896648950445244523161731856403098711121722383113" +
                "62229893423380308135336276614282806444486645238749" +
                "30358907296290491560440772390713810515859307960866" +
                "70172427121883998797908792274921901699720888093776" +
                "65727333001053367881220235421809751254540594752243" +
                "52584907711670556013604839586446706324415722155397" +
                "53697817977846174064955149290862569321978468622482" +
                "83972241375657056057490261407972968652414535100474" +
                "82166370484403199890008895243450658541227588666881" +
                "16427171479924442928230863465674813919123162824586" +
                "17866458359124566529476545682848912883142607690042" +
                "24219022671055626321111109370544217506941658960408" +
                "07198403850962455444362981230987879927244284909188" +
                "84580156166097919133875499200524063689912560717606" +
                "05886116467109405077541002256983155200055935729725" +
                "71636269561882670428252483600823257530420752963450";

            int firstIndex = 0;
            int lastIndex = 12;
            long maxProduct = 0;
            long currentProduct = 0;

            while (lastIndex < 1000)
            {
                currentProduct = 1;
                for (int i = firstIndex; i < lastIndex + 1; i++)
                { currentProduct = currentProduct * (int)Char.GetNumericValue(thousandNumber[i]); }
                if (currentProduct > maxProduct) { maxProduct = currentProduct; }
                firstIndex++;
                lastIndex++;
            }

            return "Problem 8:<br />The four adjacent digits in the 1000 - digit number " +
                "that have the greatest product are 9 × 9 × 8 × 9 = 5832.<br /><br />" +
                "73167176531330624919225119674426574742355349194934<br />" +
                "96983520312774506326239578318016984801869478851843<br />" +
                "85861560789112949495459501737958331952853208805511<br />" +
                "12540698747158523863050715693290963295227443043557<br />" +
                "66896648950445244523161731856403098711121722383113<br />" +
                "62229893423380308135336276614282806444486645238749<br />" +
                "30358907296290491560440772390713810515859307960866<br />" +
                "70172427121883998797908792274921901699720888093776<br />" +
                "65727333001053367881220235421809751254540594752243<br />" +
                "52584907711670556013604839586446706324415722155397<br />" +
                "53697817977846174064955149290862569321978468622482<br />" +
                "83972241375657056057490261407972968652414535100474<br />" +
                "82166370484403199890008895243450658541227588666881<br />" +
                "16427171479924442928230863465674813919123162824586<br />" +
                "17866458359124566529476545682848912883142607690042<br />" +
                "24219022671055626321111109370544217506941658960408<br />" +
                "07198403850962455444362981230987879927244284909188<br />" +
                "84580156166097919133875499200524063689912560717606<br />" +
                "05886116467109405077541002256983155200055935729725<br />" +
                "71636269561882670428252483600823257530420752963450<br /><br />" +
                "Find the thirteen adjacent digits in the 1000 - digit number " +
                "that have the greatest product. What is the value of this product?" +
                "<br /><br />Answer:<br />" +
                maxProduct.ToString();
        }
        public string Problem9()
        {
            //Problem 9:
            //A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
            //    a2 + b2 = c2
            //For example, 32 + 42 = 9 + 16 = 25 = 52.
            //There exists exactly one Pythagorean triplet for which a + b + c = 1000.
            //Find the product abc.
            int firstNumber = 0;
            int secondNumber = 0;
            int thirdNumber = 0;
            bool result = false;

            for (int a = 1; a < 1000; a++)
            {
                for (int b = a; b < 1000-a; b++)
                {
                    int c = 1000 - a - b;
                    if (c * c == a * a + b * b)
                    {
                        result = true;
                        firstNumber = a;
                        secondNumber = b;
                        thirdNumber = c;
                        break;
                    }
                }
                if (result == true) break;
            }
            return String.Format("Problem 9:<br />A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a^2 + b^2 = c^2.<br />" +
                "For example, 32 + 42 = 9 + 16 = 25 = 52.<br />There exists exactly one Pythagorean triplet for which a + b + c = 1000.  Find the product abc." +
                "<br /><br />a = {0}<br />b = {1}<br />c = {2}<br />abc = {3}", firstNumber.ToString(), secondNumber.ToString(), thirdNumber.ToString(), (firstNumber*secondNumber*thirdNumber).ToString());
        }
        public string CheckPalindrome(string number)
        {
            string j = number; //Number you are testing for palindrome
            int k = int.Parse(j);
            string result = "True";
            for (k = 0; k < j.Length; k++)
            {
                if (j[k] != j[j.Length - k - 1])
                {
                    result = "False";
                    break;
                }
            }

            return result;
        }
    }
}